#include&lt;bits/stdc++.h&gt;
using namespace std;
#include &lt;cstring&gt;
int nt, t, top = 0;
char s[50], NT[10], T[10], st[50], l[10][10], tr[50][50];
int searchnt(char a)
{
int count = -1, i;
for (i = 0; i &lt; nt; i++)
{
if (NT[i] == a)
return i;
}

return count;
}
int searchter(char a)
{
int count = -1, i;
for (i = 0; i &lt; t; i++)
{
if (T[i] == a)
return i;
}
return count;
}
void push(char a)
{
s[top] = a;
top++;
}
char pop()
{
top--;
return s[top];
}

void installl(int a, int b)

{
if (l[a][b] == &#39;f&#39;)
{
l[a][b] = &#39;t&#39;;
push(T[b]);
push(NT[a]);
}
}
void installt(int a, int b)
{
if (tr[a][b] == &#39;f&#39;)
{
tr[a][b] = &#39;t&#39;;
push(T[b]);
push(NT[a]);
}
}

int main()
{

int i, s, k, j, n;
char pr[30][30], b, c;
cout&lt;&lt; &quot;Enter the no of productions:&quot;;
cin&gt;&gt; n;
cout &lt;&lt; &quot;Enter the productions one by one\n&quot;;
for (i = 0; i &lt; n; i++)
cin &gt;&gt; pr[i];
nt = 0;
t = 0;
for (i = 0; i &lt; n; i++)
{
if ((searchnt(pr[i][0])) == -1)
NT[nt++] = pr[i][0];
}
for (i = 0; i &lt; n; i++)
{
for (j = 3; j &lt; strlen(pr[i]); j++)
{
if (searchnt(pr[i][j]) == -1)
{
if (searchter(pr[i][j]) == -1)
T[t++] = pr[i][j];

}
}
}
for (i = 0; i &lt; nt; i++)
{
for (j = 0; j &lt; t; j++)
l[i][j] = &#39;f&#39;;
}
for (i = 0; i &lt; nt; i++)
{
for (j = 0; j &lt; t; j++)

tr[i][j] = &#39;f&#39;;
}
for (i = 0; i &lt; nt; i++)
{
for (j = 0; j &lt; n; j++)
{
if (NT[(searchnt(pr[j][0]))] == NT[i])
{
if (searchter(pr[j][3]) != -1)
installl(searchnt(pr[j][0]), searchter(pr[j][3]));

else
{
for (k = 3; k &lt; strlen(pr[j]); k++)
{
if (searchnt(pr[j][k]) == -1)
{
installl(searchnt(pr[j][0]), searchter(pr[j][k]));
break;
}
}
}
}
}
}
while (top != 0)
{
b = pop();
c = pop();
for (s = 0; s &lt; n; s++)
{
if (pr[s][3] == b)
installl(searchnt(pr[s][0]), searchter(c));

}
}
for (i = 0; i &lt; nt; i++)
{
cout &lt;&lt; &quot;Leading[&quot; &lt;&lt; NT[i] &lt;&lt; &quot;]&quot;
&lt;&lt; &quot;\t{&quot;;
for (j = 0; j &lt; t; j++)
{
if (l[i][j] == &#39;t&#39;)
cout &lt;&lt; T[j] &lt;&lt; &quot;,&quot;;
}
cout &lt;&lt; &quot;}\n&quot;;
}

top = 0;
for (i = 0; i &lt; nt; i++)
{
for (j = 0; j &lt; n; j++)
{
if (NT[searchnt(pr[j][0])] == NT[i])
{
if (searchter(pr[j][strlen(pr[j]) - 1]) != -1)

installt(searchnt(pr[j][0]), searchter(pr[j][strlen(pr[j]) - 1]));
else
{
for (k = (strlen(pr[j]) - 1); k &gt;= 3; k--)
{
if (searchnt(pr[j][k]) == -1)
{
installt(searchnt(pr[j][0]), searchter(pr[j][k]));
break;
}
}
}
}
}
}
while (top != 0)
{
b = pop();
c = pop();
for (s = 0; s &lt; n; s++)
{
if (pr[s][3] == b)

installt(searchnt(pr[s][0]), searchter(c));
}
}
for (i = 0; i &lt; nt; i++)
{
cout &lt;&lt; &quot;Trailing[&quot; &lt;&lt; NT[i] &lt;&lt; &quot;]&quot;
&lt;&lt; &quot;\t{&quot;;
for (j = 0; j &lt; t; j++)
{
if (tr[i][j] == &#39;t&#39;)
cout &lt;&lt; T[j] &lt;&lt; &quot;,&quot;;
}
cout &lt;&lt; &quot;}\n&quot;;
}
return 0;
}